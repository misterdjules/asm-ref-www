[
 {
  "mnemonic": "AAA",
  "synopsis": "ASCII Adjust After Addition"
 },
 {
  "mnemonic": "AAD",
  "synopsis": "ASCII Adjust AX Before Division"
 },
 {
  "mnemonic": "AAM",
  "synopsis": "ASCII Adjust AX After Multiply"
 },
 {
  "mnemonic": "AAS",
  "synopsis": "ASCII Adjust AL After Subtraction"
 },
 {
  "mnemonic": "ADC",
  "synopsis": "Add with Carry"
 },
 {
  "mnemonic": "ADD",
  "synopsis": "Add"
 },
 {
  "mnemonic": "ADDPD",
  "synopsis": "Add Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "ADDPS",
  "synopsis": "Add Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "ADDSD",
  "synopsis": "Add Scalar Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "ADDSS",
  "synopsis": "Add Scalar Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "ADDSUBPD",
  "synopsis": "Packed Double-FP Add/Subtract"
 },
 {
  "mnemonic": "ADDSUBPS",
  "synopsis": "Packed Single-FP Add/Subtract"
 },
 {
  "mnemonic": "AESDEC",
  "synopsis": "Perform One Round of an AES Decryption Flow"
 },
 {
  "mnemonic": "AESDECLAST",
  "synopsis": "Perform Last Round of an AES Decryption Flow"
 },
 {
  "mnemonic": "AESENC",
  "synopsis": "Perform One Round of an AES Encryption Flow"
 },
 {
  "mnemonic": "AESENCLAST",
  "synopsis": "Perform Last Round of an AES Encryption Flow"
 },
 {
  "mnemonic": "AESIMC",
  "synopsis": "Perform the AES InvMixColumn Transformation"
 },
 {
  "mnemonic": "AESKEYGENASSIST",
  "synopsis": "AES Round Key Generation Assist"
 },
 {
  "mnemonic": "AND",
  "synopsis": "Logical AND"
 },
 {
  "mnemonic": "ANDPD",
  "synopsis": "Bitwise Logical AND of Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "ANDPS",
  "synopsis": "Bitwise Logical AND of Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "ANDNPD",
  "synopsis": "Bitwise Logical AND NOT of Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "ANDNPS",
  "synopsis": "Bitwise Logical AND NOT of Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "ARPL",
  "synopsis": "Adjust RPL Field of Segment Selector"
 },
 {
  "mnemonic": "BOUND",
  "synopsis": "Check Array Index Against Bounds"
 },
 {
  "mnemonic": "BSF",
  "synopsis": "Bit Scan Forward"
 },
 {
  "mnemonic": "BSR",
  "synopsis": "Bit Scan Reverse"
 },
 {
  "mnemonic": "BSWAP",
  "synopsis": "Byte Swap"
 },
 {
  "mnemonic": "BT",
  "synopsis": "Bit Test"
 },
 {
  "mnemonic": "BTC",
  "synopsis": "Bit Test and Complement"
 },
 {
  "mnemonic": "BTR",
  "synopsis": "Bit Test and Reset"
 },
 {
  "mnemonic": "BTS",
  "synopsis": "Bit Test and Set"
 },
 {
  "mnemonic": "CALL",
  "synopsis": "Call Procedure"
 },
 {
  "mnemonic": "CBW",
  "synopsis": "Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to"
 },
 {
  "mnemonic": "CWDE",
  "synopsis": "Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to"
 },
 {
  "mnemonic": "CDQE",
  "synopsis": "Convert Byte to Word/Convert Word to Doubleword/Convert Doubleword to"
 },
 {
  "mnemonic": "CLC",
  "synopsis": "Clear Carry Flag"
 },
 {
  "mnemonic": "CLD",
  "synopsis": "Clear Direction Flag"
 },
 {
  "mnemonic": "CLFLUSH",
  "synopsis": "Flush Cache Line"
 },
 {
  "mnemonic": "CLTS",
  "synopsis": "Clear Task-Switched Flag in CR0"
 },
 {
  "mnemonic": "CMC",
  "synopsis": "Complement Carry Flag"
 },
 {
  "mnemonic": "CMOVcc",
  "synopsis": "Conditional Move"
 },
 {
  "mnemonic": "CMP",
  "synopsis": "Compare Two Operands"
 },
 {
  "mnemonic": "CMPPD",
  "synopsis": "Compare Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "CMPPS",
  "synopsis": "Compare Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "CMPS",
  "synopsis": "Compare String Operands"
 },
 {
  "mnemonic": "CMPSB",
  "synopsis": "Compare String Operands"
 },
 {
  "mnemonic": "CMPSW",
  "synopsis": "Compare String Operands"
 },
 {
  "mnemonic": "CMPSD",
  "synopsis": "Compare String Operands"
 },
 {
  "mnemonic": "CMPSQ",
  "synopsis": "Compare String Operands"
 },
 {
  "mnemonic": "CMPSS",
  "synopsis": "Compare Scalar Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "CMPXCHG",
  "synopsis": "Compare and Exchange"
 },
 {
  "mnemonic": "CMPXCHG8B",
  "synopsis": "Compare and Exchange Bytes"
 },
 {
  "mnemonic": "CMPXCHG16B",
  "synopsis": "Compare and Exchange Bytes"
 },
 {
  "mnemonic": "COMISD",
  "synopsis": "Compare Scalar Ordered Double-Precision Floating-Point Values and Set EFLAGS"
 },
 {
  "mnemonic": "COMISS",
  "synopsis": "Compare Scalar Ordered Single-Precision Floating-Point Values and Set EFLAGS"
 },
 {
  "mnemonic": "CPUID",
  "synopsis": "CPU Identification"
 },
 {
  "mnemonic": "CVTDQ2PD",
  "synopsis": "Convert Packed Dword Integers to Packed Double-Precision FP Values"
 },
 {
  "mnemonic": "CVTDQ2PS",
  "synopsis": "Convert Packed Dword Integers to Packed Single-Precision FP Values"
 },
 {
  "mnemonic": "CVTPD2DQ",
  "synopsis": "Convert Packed Double-Precision FP Values to Packed Dword Integers"
 },
 {
  "mnemonic": "CVTPD2PI",
  "synopsis": "Convert Packed Double-Precision FP Values to Packed Dword Integers"
 },
 {
  "mnemonic": "CVTPD2PS",
  "synopsis": "Convert Packed Double-Precision FP Values to Packed Single-Precision FP Values"
 },
 {
  "mnemonic": "CVTPI2PD",
  "synopsis": "Convert Packed Dword Integers to Packed Double-Precision FP Values"
 },
 {
  "mnemonic": "CVTPI2PS",
  "synopsis": "Convert Packed Dword Integers to Packed Single-Precision FP Values"
 },
 {
  "mnemonic": "CVTPS2DQ",
  "synopsis": "Convert Packed Single-Precision FP Values to Packed Dword Integers"
 },
 {
  "mnemonic": "CVTPS2PD",
  "synopsis": "Convert Packed Single-Precision FP Values to Packed Double-Precision FP Values"
 },
 {
  "mnemonic": "CVTPS2PI",
  "synopsis": "Convert Packed Single-Precision FP Values to Packed Dword Integers"
 },
 {
  "mnemonic": "CVTSD2SI",
  "synopsis": "Convert Scalar Double-Precision FP Value to Integer"
 },
 {
  "mnemonic": "CVTSD2SS",
  "synopsis": "Convert Scalar Double-Precision FP Value to Scalar Single-Precision FP Value"
 },
 {
  "mnemonic": "CVTSI2SD",
  "synopsis": "Convert Dword Integer to Scalar Double-Precision FP Value"
 },
 {
  "mnemonic": "CVTSI2SS",
  "synopsis": "Convert Dword Integer to Scalar Single-Precision FP Value"
 },
 {
  "mnemonic": "CVTSS2SD",
  "synopsis": "Convert Scalar Single-Precision FP Value to Scalar Double-Precision FP Value"
 },
 {
  "mnemonic": "CVTSS2SI",
  "synopsis": "Convert Scalar Single-Precision FP Value to Dword Integer"
 },
 {
  "mnemonic": "CVTTPD2DQ",
  "synopsis": "Convert with Truncation Packed Double-Precision FP Values to Packed Dword"
 },
 {
  "mnemonic": "CVTTPD2PI",
  "synopsis": "Convert with Truncation Packed Double-Precision FP Values to Packed Dword"
 },
 {
  "mnemonic": "CVTTPS2DQ",
  "synopsis": "Convert with Truncation Packed Single-Precision FP Values to Packed Dword"
 },
 {
  "mnemonic": "CVTTPS2PI",
  "synopsis": "Convert with Truncation Packed Single-Precision FP Values to Packed Dword"
 },
 {
  "mnemonic": "CVTTSD2SI",
  "synopsis": "Convert with Truncation Scalar Double-Precision FP Value to Signed Integer"
 },
 {
  "mnemonic": "CVTTSS2SI",
  "synopsis": "Convert with Truncation Scalar Single-Precision FP Value to Dword Integer"
 },
 {
  "mnemonic": "CWD",
  "synopsis": "Convert Word to Doubleword/Convert Doubleword to Quadword"
 },
 {
  "mnemonic": "CDQ",
  "synopsis": "Convert Word to Doubleword/Convert Doubleword to Quadword"
 },
 {
  "mnemonic": "CQO",
  "synopsis": "Convert Word to Doubleword/Convert Doubleword to Quadword"
 },
 {
  "mnemonic": "DAA",
  "synopsis": "Decimal Adjust AL after Addition"
 },
 {
  "mnemonic": "DAS",
  "synopsis": "Decimal Adjust AL after Subtraction"
 },
 {
  "mnemonic": "DEC",
  "synopsis": "Decrement by 1"
 },
 {
  "mnemonic": "DIV",
  "synopsis": "Unsigned Divide"
 },
 {
  "mnemonic": "DIVPD",
  "synopsis": "Divide Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "DIVPS",
  "synopsis": "Divide Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "DIVSD",
  "synopsis": "Divide Scalar Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "DIVSS",
  "synopsis": "Divide Scalar Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "EMMS",
  "synopsis": "Empty MMX Technology State"
 },
 {
  "mnemonic": "ENTER",
  "synopsis": "Make Stack Frame for Procedure Parameters"
 },
 {
  "mnemonic": "F2XM1",
  "synopsis": "Compute 2xÂ–1"
 },
 {
  "mnemonic": "FABS",
  "synopsis": "Absolute Value"
 },
 {
  "mnemonic": "FADD",
  "synopsis": "Add"
 },
 {
  "mnemonic": "FADDP",
  "synopsis": "Add"
 },
 {
  "mnemonic": "FIADD",
  "synopsis": "Add"
 },
 {
  "mnemonic": "FBLD",
  "synopsis": "Load Binary Coded Decimal"
 },
 {
  "mnemonic": "FBSTP",
  "synopsis": "Store BCD Integer and Pop"
 },
 {
  "mnemonic": "FCHS",
  "synopsis": "Change Sign"
 },
 {
  "mnemonic": "FCLEX",
  "synopsis": "Clear Exceptions"
 },
 {
  "mnemonic": "FNCLEX",
  "synopsis": "Clear Exceptions"
 },
 {
  "mnemonic": "FCMOVcc",
  "synopsis": "Floating-Point Conditional Move"
 },
 {
  "mnemonic": "FCOM",
  "synopsis": "Compare Floating Point Values"
 },
 {
  "mnemonic": "FCOMP",
  "synopsis": "Compare Floating Point Values"
 },
 {
  "mnemonic": "FCOMPP",
  "synopsis": "Compare Floating Point Values"
 },
 {
  "mnemonic": "FCOS",
  "synopsis": "Cosine"
 },
 {
  "mnemonic": "FDECSTP",
  "synopsis": "Decrement Stack-Top Pointer"
 },
 {
  "mnemonic": "FDIV",
  "synopsis": "Divide"
 },
 {
  "mnemonic": "FDIVP",
  "synopsis": "Divide"
 },
 {
  "mnemonic": "FIDIV",
  "synopsis": "Divide"
 },
 {
  "mnemonic": "FDIVR",
  "synopsis": "Reverse Divide"
 },
 {
  "mnemonic": "FDIVRP",
  "synopsis": "Reverse Divide"
 },
 {
  "mnemonic": "FIDIVR",
  "synopsis": "Reverse Divide"
 },
 {
  "mnemonic": "FFREE",
  "synopsis": "Free Floating-Point Register"
 },
 {
  "mnemonic": "FICOM",
  "synopsis": "Compare Integer"
 },
 {
  "mnemonic": "FICOMP",
  "synopsis": "Compare Integer"
 },
 {
  "mnemonic": "FILD",
  "synopsis": "Load Integer"
 },
 {
  "mnemonic": "FINCSTP",
  "synopsis": "Increment Stack-Top Pointer"
 },
 {
  "mnemonic": "FINIT",
  "synopsis": "Initialize Floating-Point Unit"
 },
 {
  "mnemonic": "FNINIT",
  "synopsis": "Initialize Floating-Point Unit"
 },
 {
  "mnemonic": "FIST",
  "synopsis": "Store Integer"
 },
 {
  "mnemonic": "FISTP",
  "synopsis": "Store Integer"
 },
 {
  "mnemonic": "FISTTP",
  "synopsis": "Store Integer with Truncation"
 },
 {
  "mnemonic": "FLD",
  "synopsis": "Load Floating Point Value"
 },
 {
  "mnemonic": "FLD1",
  "synopsis": "Load Constant"
 },
 {
  "mnemonic": "FLDL2T",
  "synopsis": "Load Constant"
 },
 {
  "mnemonic": "FLDL2E",
  "synopsis": "Load Constant"
 },
 {
  "mnemonic": "FLDPI",
  "synopsis": "Load Constant"
 },
 {
  "mnemonic": "FLDLG2",
  "synopsis": "Load Constant"
 },
 {
  "mnemonic": "FLDLN2",
  "synopsis": "Load Constant"
 },
 {
  "mnemonic": "FLDZ",
  "synopsis": "Load Constant"
 },
 {
  "mnemonic": "FLDCW",
  "synopsis": "Load x87 FPU Control Word"
 },
 {
  "mnemonic": "FLDENV",
  "synopsis": "Load x87 FPU Environment"
 },
 {
  "mnemonic": "FMUL",
  "synopsis": "Multiply"
 },
 {
  "mnemonic": "FMULP",
  "synopsis": "Multiply"
 },
 {
  "mnemonic": "FIMUL",
  "synopsis": "Multiply"
 },
 {
  "mnemonic": "FNOP",
  "synopsis": "No Operation"
 },
 {
  "mnemonic": "FPATAN",
  "synopsis": "Partial Arctangent"
 },
 {
  "mnemonic": "FPREM",
  "synopsis": "Partial Remainder"
 },
 {
  "mnemonic": "FPREM1",
  "synopsis": "Partial Remainder"
 },
 {
  "mnemonic": "FPTAN",
  "synopsis": "Partial Tangent"
 },
 {
  "mnemonic": "FRNDINT",
  "synopsis": "Round to Integer"
 },
 {
  "mnemonic": "FRSTOR",
  "synopsis": "Restore x87 FPU State"
 },
 {
  "mnemonic": "FSAVE",
  "synopsis": "Store x87 FPU State"
 },
 {
  "mnemonic": "FNSAVE",
  "synopsis": "Store x87 FPU State"
 },
 {
  "mnemonic": "FSCALE",
  "synopsis": "Scale"
 },
 {
  "mnemonic": "FSIN",
  "synopsis": "Sine"
 },
 {
  "mnemonic": "FSINCOS",
  "synopsis": "Sine and Cosine"
 },
 {
  "mnemonic": "FSQRT",
  "synopsis": "Square Root"
 },
 {
  "mnemonic": "FST",
  "synopsis": "Store Floating Point Value"
 },
 {
  "mnemonic": "FSTP",
  "synopsis": "Store Floating Point Value"
 },
 {
  "mnemonic": "FSTCW",
  "synopsis": "Store x87 FPU Control Word"
 },
 {
  "mnemonic": "FNSTCW",
  "synopsis": "Store x87 FPU Control Word"
 },
 {
  "mnemonic": "FSTENV",
  "synopsis": "Store x87 FPU Environment"
 },
 {
  "mnemonic": "FNSTENV",
  "synopsis": "Store x87 FPU Environment"
 },
 {
  "mnemonic": "FSTSW",
  "synopsis": "Store x87 FPU Status Word"
 },
 {
  "mnemonic": "FNSTSW",
  "synopsis": "Store x87 FPU Status Word"
 },
 {
  "mnemonic": "FSUB",
  "synopsis": "Subtract"
 },
 {
  "mnemonic": "FSUBP",
  "synopsis": "Subtract"
 },
 {
  "mnemonic": "FISUB",
  "synopsis": "Subtract"
 },
 {
  "mnemonic": "FSUBR",
  "synopsis": "Reverse Subtract"
 },
 {
  "mnemonic": "FSUBRP",
  "synopsis": "Reverse Subtract"
 },
 {
  "mnemonic": "FISUBR",
  "synopsis": "Reverse Subtract"
 },
 {
  "mnemonic": "FTST",
  "synopsis": "TEST"
 },
 {
  "mnemonic": "FUCOM",
  "synopsis": "Unordered Compare Floating Point Values"
 },
 {
  "mnemonic": "FUCOMP",
  "synopsis": "Unordered Compare Floating Point Values"
 },
 {
  "mnemonic": "FUCOMPP",
  "synopsis": "Unordered Compare Floating Point Values"
 },
 {
  "mnemonic": "FXAM",
  "synopsis": "Examine ModR/M"
 },
 {
  "mnemonic": "FXCH",
  "synopsis": "Exchange Register Contents"
 },
 {
  "mnemonic": "FXRSTOR",
  "synopsis": "Restore x87 FPU, MMX , XMM, and MXCSR State"
 },
 {
  "mnemonic": "FXSAVE",
  "synopsis": "Save x87 FPU, MMX Technology, and SSE State"
 },
 {
  "mnemonic": "FXTRACT",
  "synopsis": "Extract Exponent and Significand"
 },
 {
  "mnemonic": "FYL2X",
  "synopsis": "Compute y"
 },
 {
  "mnemonic": "FYL2XP1",
  "synopsis": "Compute y"
 },
 {
  "mnemonic": "HADDPD",
  "synopsis": "Packed Double-FP Horizontal Add"
 },
 {
  "mnemonic": "HADDPS",
  "synopsis": "Packed Single-FP Horizontal Add"
 },
 {
  "mnemonic": "HLT",
  "synopsis": "Halt"
 },
 {
  "mnemonic": "HSUBPD",
  "synopsis": "Packed Double-FP Horizontal Subtract"
 },
 {
  "mnemonic": "HSUBPS",
  "synopsis": "Packed Single-FP Horizontal Subtract"
 },
 {
  "mnemonic": "IDIV",
  "synopsis": "Signed Divide"
 },
 {
  "mnemonic": "IMUL",
  "synopsis": "Signed Multiply"
 },
 {
  "mnemonic": "IN",
  "synopsis": "Input from Port"
 },
 {
  "mnemonic": "INC",
  "synopsis": "Increment by 1"
 },
 {
  "mnemonic": "INS",
  "synopsis": "Input from Port to String"
 },
 {
  "mnemonic": "INSB",
  "synopsis": "Input from Port to String"
 },
 {
  "mnemonic": "INSW",
  "synopsis": "Input from Port to String"
 },
 {
  "mnemonic": "INSD",
  "synopsis": "Input from Port to String"
 },
 {
  "mnemonic": "INVD",
  "synopsis": "Invalidate Internal Caches"
 },
 {
  "mnemonic": "INVLPG",
  "synopsis": "Invalidate TLB Entry"
 },
 {
  "mnemonic": "INVPCID",
  "synopsis": "Invalidate Process-Context Identifier"
 },
 {
  "mnemonic": "IRET",
  "synopsis": "Interrupt Return"
 },
 {
  "mnemonic": "IRETD",
  "synopsis": "Interrupt Return"
 },
 {
  "mnemonic": "Jcc",
  "synopsis": "Jump if Condition Is Met"
 },
 {
  "mnemonic": "JMP",
  "synopsis": "Jump"
 },
 {
  "mnemonic": "LAHF",
  "synopsis": "Load Status Flags into AH Register"
 },
 {
  "mnemonic": "LAR",
  "synopsis": "Load Access Rights Byte"
 },
 {
  "mnemonic": "LDDQU",
  "synopsis": "Load Unaligned Integer 128 Bits"
 },
 {
  "mnemonic": "LDMXCSR",
  "synopsis": "Load MXCSR Register"
 },
 {
  "mnemonic": "LDS",
  "synopsis": "Load Far Pointer"
 },
 {
  "mnemonic": "LES",
  "synopsis": "Load Far Pointer"
 },
 {
  "mnemonic": "LFS",
  "synopsis": "Load Far Pointer"
 },
 {
  "mnemonic": "LGS",
  "synopsis": "Load Far Pointer"
 },
 {
  "mnemonic": "LSS",
  "synopsis": "Load Far Pointer"
 },
 {
  "mnemonic": "LEA",
  "synopsis": "Load Effective Address"
 },
 {
  "mnemonic": "LEAVE",
  "synopsis": "High Level Procedure Exit"
 },
 {
  "mnemonic": "LFENCE",
  "synopsis": "Load Fence"
 },
 {
  "mnemonic": "LGDT",
  "synopsis": "Load Global/Interrupt Descriptor Table Register"
 },
 {
  "mnemonic": "LIDT",
  "synopsis": "Load Global/Interrupt Descriptor Table Register"
 },
 {
  "mnemonic": "LLDT",
  "synopsis": "Load Local Descriptor Table Register"
 },
 {
  "mnemonic": "LMSW",
  "synopsis": "Load Machine Status Word"
 },
 {
  "mnemonic": "LOCK",
  "synopsis": "Assert LOCK# Signal Prefix"
 },
 {
  "mnemonic": "LODS",
  "synopsis": "Load String"
 },
 {
  "mnemonic": "LODSB",
  "synopsis": "Load String"
 },
 {
  "mnemonic": "LODSW",
  "synopsis": "Load String"
 },
 {
  "mnemonic": "LODSD",
  "synopsis": "Load String"
 },
 {
  "mnemonic": "LODSQ",
  "synopsis": "Load String"
 },
 {
  "mnemonic": "LOOP",
  "synopsis": "Loop According to ECX Counter"
 },
 {
  "mnemonic": "LOOPcc",
  "synopsis": "Loop According to ECX Counter"
 },
 {
  "mnemonic": "LSL",
  "synopsis": "Load Segment Limit"
 },
 {
  "mnemonic": "LTR",
  "synopsis": "Load Task Register"
 },
 {
  "mnemonic": "MASKMOVDQU",
  "synopsis": "Store Selected Bytes of Double Quadword"
 },
 {
  "mnemonic": "MASKMOVQ",
  "synopsis": "Store Selected Bytes of Quadword"
 },
 {
  "mnemonic": "MAXPD",
  "synopsis": "Return Maximum Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MAXPS",
  "synopsis": "Return Maximum Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MAXSD",
  "synopsis": "Return Maximum Scalar Double-Precision Floating-Point Value"
 },
 {
  "mnemonic": "MAXSS",
  "synopsis": "Return Maximum Scalar Single-Precision Floating-Point Value"
 },
 {
  "mnemonic": "MFENCE",
  "synopsis": "Memory Fence"
 },
 {
  "mnemonic": "MINPD",
  "synopsis": "Return Minimum Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MINPS",
  "synopsis": "Return Minimum Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MINSD",
  "synopsis": "Return Minimum Scalar Double-Precision Floating-Point Value"
 },
 {
  "mnemonic": "MINSS",
  "synopsis": "Return Minimum Scalar Single-Precision Floating-Point Value"
 },
 {
  "mnemonic": "MONITOR",
  "synopsis": "Set Up Monitor Address"
 },
 {
  "mnemonic": "MOV",
  "synopsis": "Move"
 },
 {
  "mnemonic": "MOVAPD",
  "synopsis": "Move Aligned Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MOVAPS",
  "synopsis": "Move Aligned Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MOVBE",
  "synopsis": "Move Data After Swapping Bytes"
 },
 {
  "mnemonic": "MOVD",
  "synopsis": "Move Doubleword/Move Quadword"
 },
 {
  "mnemonic": "MOVQ",
  "synopsis": "Move Doubleword/Move Quadword"
 },
 {
  "mnemonic": "MOVDDUP",
  "synopsis": "Move One Double-FP and Duplicate"
 },
 {
  "mnemonic": "MOVDQA",
  "synopsis": "Move Aligned Double Quadword"
 },
 {
  "mnemonic": "MOVDQU",
  "synopsis": "Move Unaligned Double Quadword"
 },
 {
  "mnemonic": "MOVDQ2Q",
  "synopsis": "Move Quadword from XMM to MMX Technology Register"
 },
 {
  "mnemonic": "MOVHPD",
  "synopsis": "Move High Packed Double-Precision Floating-Point Value"
 },
 {
  "mnemonic": "MOVHPS",
  "synopsis": "Move High Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MOVLHPS",
  "synopsis": "Move Packed Single-Precision Floating-Point Values Low to High"
 },
 {
  "mnemonic": "MOVLPD",
  "synopsis": "Move Low Packed Double-Precision Floating-Point Value"
 },
 {
  "mnemonic": "MOVLPS",
  "synopsis": "Move Low Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MOVMSKPD",
  "synopsis": "Extract Packed Double-Precision Floating-Point Sign Mask"
 },
 {
  "mnemonic": "MOVMSKPS",
  "synopsis": "Extract Packed Single-Precision Floating-Point Sign Mask"
 },
 {
  "mnemonic": "MOVNTDQ",
  "synopsis": "Store Double Quadword Using Non-Temporal Hint"
 },
 {
  "mnemonic": "MOVNTI",
  "synopsis": "Store Doubleword Using Non-Temporal Hint"
 },
 {
  "mnemonic": "MOVNTPD",
  "synopsis": "Store Packed Double-Precision Floating-Point Values Using Non-Temporal Hint"
 },
 {
  "mnemonic": "MOVNTPS",
  "synopsis": "Store Packed Single-Precision Floating-Point Values Using Non-Temporal Hint"
 },
 {
  "mnemonic": "MOVNTQ",
  "synopsis": "Store of Quadword Using Non-Temporal Hint"
 },
 {
  "mnemonic": "MOVQ2DQ",
  "synopsis": "Move Quadword from MMX Technology to XMM Register"
 },
 {
  "mnemonic": "MOVS",
  "synopsis": "Move Data from String to String"
 },
 {
  "mnemonic": "MOVSB",
  "synopsis": "Move Data from String to String"
 },
 {
  "mnemonic": "MOVSW",
  "synopsis": "Move Data from String to String"
 },
 {
  "mnemonic": "MOVSD",
  "synopsis": "Move Data from String to String"
 },
 {
  "mnemonic": "MOVSQ",
  "synopsis": "Move Data from String to String"
 },
 {
  "mnemonic": "MOVSHDUP",
  "synopsis": "Move Packed Single-FP High and Duplicate"
 },
 {
  "mnemonic": "MOVSLDUP",
  "synopsis": "Move Packed Single-FP Low and Duplicate"
 },
 {
  "mnemonic": "MOVSS",
  "synopsis": "Move Scalar Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MOVSX",
  "synopsis": "Move with Sign-Extension"
 },
 {
  "mnemonic": "MOVSXD",
  "synopsis": "Move with Sign-Extension"
 },
 {
  "mnemonic": "MOVUPD",
  "synopsis": "Move Unaligned Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MOVUPS",
  "synopsis": "Move Unaligned Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MOVZX",
  "synopsis": "Move with Zero-Extend"
 },
 {
  "mnemonic": "MUL",
  "synopsis": "Unsigned Multiply"
 },
 {
  "mnemonic": "MULPD",
  "synopsis": "Multiply Packed Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MULPS",
  "synopsis": "Multiply Packed Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MULSD",
  "synopsis": "Multiply Scalar Double-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MULSS",
  "synopsis": "Multiply Scalar Single-Precision Floating-Point Values"
 },
 {
  "mnemonic": "MWAIT",
  "synopsis": "Monitor Wait"
 }
]